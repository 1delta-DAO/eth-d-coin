{"abi":[{"type":"function","name":"checkAccountStatus","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"collaterals","type":"address[]","internalType":"address[]"}],"outputs":[{"name":"magicValue","type":"bytes4","internalType":"bytes4"}],"stateMutability":"nonpayable"},{"type":"function","name":"checkVaultStatus","inputs":[],"outputs":[{"name":"magicValue","type":"bytes4","internalType":"bytes4"}],"stateMutability":"nonpayable"},{"type":"function","name":"disableController","inputs":[],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"checkAccountStatus(address,address[])":"b168c58f","checkVaultStatus()":"4b3d1223","disableController()":"869e50c7"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"collaterals\",\"type\":\"address[]\"}],\"name\":\"checkAccountStatus\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkVaultStatus\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Euler Labs (https://www.eulerlabs.com/)\",\"kind\":\"dev\",\"methods\":{\"checkAccountStatus(address,address[])\":{\"params\":{\"account\":\"The address of the account to be checked.\"},\"returns\":{\"magicValue\":\"Must return the bytes4 magic value 0xb168c58f (which is a selector of this function) when account status is valid, or revert otherwise.\"}},\"checkVaultStatus()\":{\"returns\":{\"magicValue\":\"Must return the bytes4 magic value 0x4b3d1223 (which is a selector of this function) when account status is valid, or revert otherwise.\"}},\"disableController()\":{\"details\":\"A controller is a vault that has been chosen for an account to have special control over account\\u2019s balances in the enabled collaterals vaults. User calls this function in order for the vault to disable itself for the account if the conditions are met (i.e. user has repaid debt in full). If the conditions are not met, the function reverts.\"}},\"title\":\"IVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAccountStatus(address,address[])\":{\"notice\":\"Checks the status of an account.\"},\"checkVaultStatus()\":{\"notice\":\"Checks the status of the vault.\"},\"disableController()\":{\"notice\":\"Disables a controller (this vault) for the authenticated account.\"}},\"notice\":\"This interface defines the methods for the Vault for the purpose of integration with the Ethereum Vault Connector.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/ethereum-vault-connector/src/interfaces/IVault.sol\":\"IVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/erc4626-tests/\",\":ethereum-vault-connector/=lib/ethereum-vault-connector/\",\":evc-playground/=lib/evc-playground/\",\":evc/=lib/ethereum-vault-connector/src/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"lib/ethereum-vault-connector/src/interfaces/IVault.sol\":{\"keccak256\":\"0x94fde497747dd6123420d750e881ad267c4003f794554c76c95bd4bb34c6bd13\",\"license\":\"GPL-2.0-or-later\",\"urls\":[\"bzz-raw://a1fa6526dc4088c46e8de7a0b532fd3a2f7ee2b5f92362895b530d52621208c4\",\"dweb:/ipfs/QmVi29xhnSoXWrciXrHZzEwAy7oJJE95syqRWUHf6hrkUo\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.20+commit.a1b79de6"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address[]","name":"collaterals","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"checkAccountStatus","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"checkVaultStatus","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"disableController"}],"devdoc":{"kind":"dev","methods":{"checkAccountStatus(address,address[])":{"params":{"account":"The address of the account to be checked."},"returns":{"magicValue":"Must return the bytes4 magic value 0xb168c58f (which is a selector of this function) when account status is valid, or revert otherwise."}},"checkVaultStatus()":{"returns":{"magicValue":"Must return the bytes4 magic value 0x4b3d1223 (which is a selector of this function) when account status is valid, or revert otherwise."}},"disableController()":{"details":"A controller is a vault that has been chosen for an account to have special control over account’s balances in the enabled collaterals vaults. User calls this function in order for the vault to disable itself for the account if the conditions are met (i.e. user has repaid debt in full). If the conditions are not met, the function reverts."}},"version":1},"userdoc":{"kind":"user","methods":{"checkAccountStatus(address,address[])":{"notice":"Checks the status of an account."},"checkVaultStatus()":{"notice":"Checks the status of the vault."},"disableController()":{"notice":"Disables a controller (this vault) for the authenticated account."}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/erc4626-tests/","ethereum-vault-connector/=lib/ethereum-vault-connector/","evc-playground/=lib/evc-playground/","evc/=lib/ethereum-vault-connector/src/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","solmate/=lib/solmate/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/ethereum-vault-connector/src/interfaces/IVault.sol":"IVault"},"libraries":{}},"sources":{"lib/ethereum-vault-connector/src/interfaces/IVault.sol":{"keccak256":"0x94fde497747dd6123420d750e881ad267c4003f794554c76c95bd4bb34c6bd13","urls":["bzz-raw://a1fa6526dc4088c46e8de7a0b532fd3a2f7ee2b5f92362895b530d52621208c4","dweb:/ipfs/QmVi29xhnSoXWrciXrHZzEwAy7oJJE95syqRWUHf6hrkUo"],"license":"GPL-2.0-or-later"}},"version":1},"ast":{"absolutePath":"lib/ethereum-vault-connector/src/interfaces/IVault.sol","id":8047,"exportedSymbols":{"IVault":[8046]},"nodeType":"SourceUnit","src":"46:1448:10","nodes":[{"id":8023,"nodeType":"PragmaDirective","src":"46:24:10","nodes":[],"literals":["solidity","^","0.8",".19"]},{"id":8046,"nodeType":"ContractDefinition","src":"273:1220:10","nodes":[{"id":8028,"nodeType":"FunctionDefinition","src":"758:38:10","nodes":[],"documentation":{"id":8025,"nodeType":"StructuredDocumentation","src":"296:457:10","text":"@notice Disables a controller (this vault) for the authenticated account.\n @dev A controller is a vault that has been chosen for an account to have special control over account’s\n balances in the enabled collaterals vaults. User calls this function in order for the vault to disable itself\n for the account if the conditions are met (i.e. user has repaid debt in full). If the conditions are not met,\n the function reverts."},"functionSelector":"869e50c7","implemented":false,"kind":"function","modifiers":[],"name":"disableController","nameLocation":"767:17:10","parameters":{"id":8026,"nodeType":"ParameterList","parameters":[],"src":"784:2:10"},"returnParameters":{"id":8027,"nodeType":"ParameterList","parameters":[],"src":"795:0:10"},"scope":8046,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8039,"nodeType":"FunctionDefinition","src":"1087:114:10","nodes":[],"documentation":{"id":8029,"nodeType":"StructuredDocumentation","src":"802:280:10","text":"@notice Checks the status of an account.\n @param account The address of the account to be checked.\n @return magicValue Must return the bytes4 magic value 0xb168c58f (which is a selector of this function) when\n account status is valid, or revert otherwise."},"functionSelector":"b168c58f","implemented":false,"kind":"function","modifiers":[],"name":"checkAccountStatus","nameLocation":"1096:18:10","parameters":{"id":8035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8031,"mutability":"mutable","name":"account","nameLocation":"1123:7:10","nodeType":"VariableDeclaration","scope":8039,"src":"1115:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8030,"name":"address","nodeType":"ElementaryTypeName","src":"1115:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8034,"mutability":"mutable","name":"collaterals","nameLocation":"1151:11:10","nodeType":"VariableDeclaration","scope":8039,"src":"1132:30:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":8032,"name":"address","nodeType":"ElementaryTypeName","src":"1132:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8033,"nodeType":"ArrayTypeName","src":"1132:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"1114:49:10"},"returnParameters":{"id":8038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8037,"mutability":"mutable","name":"magicValue","nameLocation":"1189:10:10","nodeType":"VariableDeclaration","scope":8039,"src":"1182:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":8036,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1182:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1181:19:10"},"scope":8046,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":8045,"nodeType":"FunctionDefinition","src":"1426:65:10","nodes":[],"documentation":{"id":8040,"nodeType":"StructuredDocumentation","src":"1207:214:10","text":"@notice Checks the status of the vault.\n @return magicValue Must return the bytes4 magic value 0x4b3d1223 (which is a selector of this function) when\n account status is valid, or revert otherwise."},"functionSelector":"4b3d1223","implemented":false,"kind":"function","modifiers":[],"name":"checkVaultStatus","nameLocation":"1435:16:10","parameters":{"id":8041,"nodeType":"ParameterList","parameters":[],"src":"1451:2:10"},"returnParameters":{"id":8044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8043,"mutability":"mutable","name":"magicValue","nameLocation":"1479:10:10","nodeType":"VariableDeclaration","scope":8045,"src":"1472:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":8042,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1472:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1471:19:10"},"scope":8046,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IVault","contractDependencies":[],"contractKind":"interface","documentation":{"id":8024,"nodeType":"StructuredDocumentation","src":"72:201:10","text":"@title IVault\n @author Euler Labs (https://www.eulerlabs.com/)\n @notice This interface defines the methods for the Vault for the purpose of integration with the Ethereum Vault\n Connector."},"fullyImplemented":false,"linearizedBaseContracts":[8046],"name":"IVault","nameLocation":"283:6:10","scope":8047,"usedErrors":[],"usedEvents":[]}],"license":"GPL-2.0-or-later"},"id":10}